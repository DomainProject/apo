from src.ddm import actor_matrix, ddm_init, ddm_optimize, ddm_poll


def test_ddm():
    total_cus = 25
    total_actors = 8
    cus = [1] * 20 + [2] * 4 + [4]
    msg_exch_cost = [
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [1] * 20 + [2, 2, 2, 2, 2],
        [2] * 20 + [1, 1, 1, 1, 3],
        [2] * 20 + [1, 1, 1, 1, 3],
        [2] * 20 + [1, 1, 1, 1, 3],
        [2] * 20 + [1, 1, 1, 1, 3],
        [2] * 20 + [3, 3, 3, 3, 1]
    ]
    runnable_on = [1, 1, 1, 1, 3, 7, 7, 7]
    cu_capacity = [200] * 20 + [500, 500, 500, 500, 300]

    print(msg_exch_cost)

    ddm_init(total_cus, total_actors, cus, msg_exch_cost, runnable_on)

    actors = [
        [(0, 0), (20, 10), (10, 20), (0, 10), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 35), (0, 0)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 20)],
        [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]
    ]

    # Convert tuples to actor_matrix structures
    act_struct = []
    for row in actors:
        act_struct.append([actor_matrix(*r) for r in row])

    tasks_forecast = [50, 50, 50, 50, 20, 50, 50, 80]

    ddm_optimize(total_actors, act_struct, tasks_forecast, total_cus, cu_capacity)
    res = None
    while res is None:
        res = ddm_poll()
    print(res)
    result_values = [res[i] for i in range(total_actors)]
    print(result_values)
